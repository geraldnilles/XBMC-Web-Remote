#!/usr/bin/env python

import os, socket, json, random, hashlib
from urlparse import parse_qs
from cgi import escape
from urllib import unquote
from wsgiref.simple_server import make_server

def start_server():
    conf = open("/etc/xbmcwebremote/config.json","r")
    j = json.load(conf)
    conf.close()
    r = remote( j["frontends"], # Dict of Frontends and IPs
                j["folders"], # List of folders
                j["sambashare"]) # Samba to Filesystem comparison
    # Start WSGI
    port = j["port"]
    httpd = make_server("",port,r.process_request)
    print "Serving on port "+str(port)
    httpd.serve_forever()

# Remote Class
class remote():
    def __init__(self,  fes, # List of frontends 
                        folders, # List of folders
                        smbinfo): # dictionary of Samba Path Info
        # Save Frontends to Object
        self.FrontEnds = fes

        # Create FileTree JSON to organize file heiarchy
        self.FileTree = {   "name":smbinfo["fpath"].rstrip("/"), # OS FileSystem Root
                            "spath":smbinfo["spath"].rstrip("/"), # Samba FileSystem Root
                            "children":[]}    # List of Children

        # Add Selected Folders to File Tree
        for f in folders:
            self.FileTree["children"].append({  "name":f, # Name of the folder
                                                "children":[], # Empty list for children
                                                "parent":self.FileTree}) # Pointer to Parent

        # Parse the folders and populate the FileTree
        self.scan_folders()

        # Add a Unique Identfier to each item of the tree for quick recalling
        self.add_uids()

    ############
    ## FileTree Methods
    ###########

    # Scans the FileTree to find all files/folders and add them to the tree
    def scan_folders(self,fs=None): # List of files/Folders
        # This is so the initial call can be without parameters
        if fs == None:
            fs = self.FileTree["children"]

        for f in fs: # Scan Each item
            fpath = self.get_fpath(f) # Get full OS path
            if os.path.isdir(fpath):
                # Add all files to the "children" list
                for c in sorted(os.listdir(fpath)):
                    f["children"].append({"name":c,"children":[],"parent":f})
            # Recusivly call the same function for the children
            self.scan_folders(f["children"])

    # Traverses FileTree and populates UID field for eac item.
    # THis is just a hash of the full OS Path
    def add_uids(self,f=None):
        if f == None: # THis is so the first call can be without arguments
            f = self.FileTree
        # Generate a sha1 hash
        f["uid"] = hashlib.sha1(self.get_spath(f)).hexdigest()
        # Recursivly call for each child
        for c in f["children"]:
            self.add_uids(c)
    
    # Generate full OS filesystem path for given file/folder object from FileTree
    def get_fpath(self,f):
        # Start with thie file name
        fpath = f["name"]
        # Step back through the parents and prepend each folder name
        while "parent" in f:
            f = f["parent"]
            fpath = f["name"]+"/"+fpath

        return fpath

    # Generate a full Samba filesystem path for a given file/folder object
    # Same as get_fpath except the spath is used when availible 
    def get_spath(self,f):
        spath = f["name"]
        while "parent" in f:
            f = f["parent"]
            if "spath" in f:
                spath = f["spath"]+"/"+spath
            else:
                spath = f["name"]+"/"+spath

        return spath

    # Searchs the Tree for a string query: q.  
    # Returns a list of matches
    def search(self,q, # String Search Query
                        ms=[],  # List of Matches
                        f=None): # Current File/Folder Object
        if f==None:  # THis so the original call can have 1 parameter (q)
            f=self.FileTree
            ms = [] # Clear Matches when starting over

        # If matches, add f to the list of matches
        if self.matches(q,f["name"]):
            ms.append(f)

        else: # If not, recusivly search its children
            for c in f["children"]:
                self.search(q,ms,c)

        # When all recursion is done, return matches
        return ms

    # Searchs FileTree for UID Hash.
    # Returns the file/folder object 
    def search_uid(self,uid,f=None):
        if f == None: # For clean calling
            f = self.FileTree

        # If it matches, return f object
        if f["uid"] == uid:
            return f
        else: # Otherwise, search its children and return any matches
            for c in f["children"]:
                m = self.search_uid(uid,c)
                if m != None:
                    return m
                    
            
    # Determins if a query and a filename match.
    # This method will allow for more customization of the query grammar.
    def matches(self,   q, # Search QUery
                        fname): # File/folder name
        if q == "" or q == "*":
            return True
        elif fname.lower().find(q.lower()) != -1 :
            return True
        else:
            return False

    # Prints Tree to terminal
    # THis is more for debug purposes
    def print_tree(self,fs,ind = 0):
        for f in fs:
            print ("  "*ind)+f["name"]
            self.print_tree(f["children"],ind+1)


    ###############
    ## JSON-RPC Methods
    ################

    # Send a json object to the frontend using TCP communication
    def send_json(self, js,     # List of JSON commands (json Object)
                        feip):  # IP address of frontend (String)

        # Get IP from f
        ip = feip

        # Create and open a TCP Socket.  XBMC uses port 9090
        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.connect((ip,9090))

        # Send the list of JSON requests. One at a time
        for j in js:
            s.send(json.dumps(j))
            print s.recv(1024) # For debug purposes TODO, figure out what the recv number means?
        # Clsoe the Socket
        s.close()
        # Return Status.  For now, always return 0
        # TODO Figure out hwo to detect JSON errors
        return 0


    # Adds an item to the playlist
    def add_item(self,spath):# Complete Samba Path
        j = self.blank_json()
        j["method"] = "Playlist.Add"
        j["params"] = {"playlistid":1}
        j["params"]["item"] = {"file":spath}
        return j

    # Clears the playlist
    def clear_playlist(self):
        j = self.blank_json()
        j["method"] = "Playlist.Clear"
        j["params"] = {"playlistid":1}
        return j

    # Starts the playlist
    def start_playlist(self):
        j = self.blank_json()
        j["method"] = "Player.Open"
        j["params"] = [{"playlistid":1}]
        return j

    ## TODO Add method that gets all active players and stops them

    # Creates a blank JSON Request (used by the other JSON requests)
    def blank_json(self):
        return {"jsonrpc":"2.0", "id":1}

    # Randomly grabs a block of adjacent videos from a folder
    def play_group(self,f,  # Folder Object
                        feip, # FrontEnd IP
                        numeps): # Size of requested episode block

        numeps = int(numeps)
        # Get total number of episodes
        totaleps = len(f["children"])
        # If block is bigger than total number of episodes, reduce episode block size
        if totaleps < numeps:
            numeps = totaleps

        # Select a random episode
        index = random.randint(0,totaleps-numeps)
        # Create list to hold JSON requests
        js = []
        # Clear current playlist
        js.append(self.clear_playlist())
        # Add the episode block
        for i in range(index,index+numeps):
            js.append(self.add_item(self.get_spath(f["children"][i])))
        # Start Playback
        js.append(self.start_playlist())
        
        # Send the request
        self.send_json(js,feip)
    
    # Play a single file    
    def play_single(self,   f,  # FileTree Object pointing to file
                            feip): # Frontend Ip Address
        # Create list of JSON requests
        js = []
        js.append(self.clear_playlist())
        js.append(self.add_item(self.get_spath(f)))
        js.append(self.start_playlist())

        self.send_json(js,feip)

    #############
    ## HTTP Methods --- Handling the HTTP server requests
    #############

    # Look at path and determine which method shoudl service the request
    def process_request(self,e,s):
        # Set Type as HTML

        # Removes slashes from the ends
        wholepath = e.get("PATH_INFO",'').lstrip("/").rstrip("/")
        # Removes GET data from the path name
        path = wholepath.split("/")[0]

        # Get output HTML from one of the methods
        output = ""
        if path=="":
            output = self.main_page_req()
        elif path == "list":
            output = self.list_req(e)
        elif path == "cmd":
            output = self.cmd_req(e)
        else: 
            output = "Invalid Path"

        # Sets HTML header and sends HTML data
        s('200 OK', [('Content-Type', 'text/html; charset=ISO-8859-1')])
        return [output]

    # Prints main HTML page.  The environment variable is not passed since its not needed
    def main_page_req(self):
        # Open HTML file
        f = open("/usr/local/xbmcwebremote/main.html","r") ## TODO Move this to /usr/share folder
        data = f.read()
        f.close()
        return data

    # PRints list of files/folders
    def list_req(self,e):
        # Parse GET/POST data for filter query
        d = self.get_dict(e)
        # Create q entry if not present
        if "q" not in d:
            d["q"] = ""
        # Filter Tree
        results = self.search(d["q"])
        # Convert to HTML and return
        output = self.tree_to_html(results)
        return output

    # Executes JSOn command
    def cmd_req(self,e):
        # Parse GET/POST data
        d = self.get_dict(e)

        # TODO Add a "Rescan Folders" command option

        # Find Object based on UID
        f = self.search_uid(d["uid"])
        fe = self.FrontEnds[d["room"]]
        # Check if a single file was selected
        if len(f["children"]) == 0 :
            self.play_single(f,fe)
        else:
            numeps = d["numeps"]
            self.play_group(f,fe,numeps)

        #self.send_json(j,f)
        return "Command Sent" # Otherwise return error

    # Creates a dictionary of the "GET" data.  Only keeps first get object of each key name
    def get_dict(self,e):
        d = parse_qs(e["QUERY_STRING"])
        fix_d = {}
        for key in d:
            fix_d[key] = escape(unquote(d[key][0]))
        return fix_d

    # Converts a list of tree nodes to HTML
    def tree_to_html(self,fs):
        output = ""
        for f in fs:
            output += "<div class=\"result\" >"
            # If a file (no children)
            output += "<a href=\"#\" class=\"item\" uid=\""+f["uid"]+"\"  >" 
            output += f["name"]
            output += "</a>"
            output += self.tree_to_html(f["children"])
            output += "</div>"
        return str(output)

### Start Server Call.  Only called if script is executed independantly
if __name__ == "__main__":
    start_server()

